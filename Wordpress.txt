¿Que son los Hooks?

Son espacios dentro del codigo donde puedes ejecutar tus propias funciones, puedes ejecutar 2 tipos de hooks, action y filter
Action

Ejecuta una función en un lugar que especifiques sin retornar ningun valor.
Filter

Ejecuta la funcion recibiendo parametros procesandolos y retornandolos ya procesados




_______________________________________________________________________________________________________________



Manejo de Librerías en WordPress

Las librerías en WordPress las podemos manejar de diferentes tipos y para cada uno de ellos los vamos a utilizar de manera diferente.

Para los archivos CSS vamos a usar dos funciones, estas están basadas en dos tipos de formas para manejar la información en WordPress:
wp_register_style(): En esta es el registro. Nos sirve para registrarnos en librería y que la tengamos a disposición con una dependencia pero no las va a ejecutar en nuestro HTML. Recibe 5 argumentos:
$handle string: el nombre que va a tener nuestra librería para wordpress
$src string or $src boll: Determinar de donde es la fuente de nuestro archivo. En source Podemos recibir bool porque podemos llamar todas las dependencias que nosotros necesitamos sin crear una nueva, es decir, si nosotros tenemos registrado Bootstrap, podemos llamar a boottrap, pasar bool en vez de string en el source y recibir solamente Bootstrap. Estos es como un alias para hacer un conjunto de librerías sin llamar una nueva
$deps=array()array: las dependencias van a ser un array de strings que vamos a poner los nombres o handeles que fuimos registrando previamente, si tenemos alguno o directamente a registrarlo si tenemos uno nuevo
$ver=string or $ver=bool or $ver=null: estos son importantes si tenemos una versión de cache para poder decirle a nuestro navegador que regenere el pedido en caso de querer hacer modificaciones
$media=’all’string: Nos permite que nuestro ccs se pueda ejecutar en todos lados o en una resolución especifica o en un dispositivo especifico

wp_enqueque_style(): En esta es el poner en cola. Nos va a ejecutar directamente la librería que nosotros le digamos, pero va a llamar las referencias sin necesitar alguna que tengamos registradas. Esta también va a recibir los mismos argumentos pero la ejecución va a ser directamente en vez de registrarlos, dejarla a disposición ya ejecutado en nuestro HTML.

En Javascrip:
wp_register_style(): En esta es el registro. Nos sirve para registrarnos en librería y que la tengamos a disposición con una dependencia pero no las va a ejecutar en nuestro HTML. Recibe 5 argumentos:
$handle string: el nombre que va a tener nuestra librería para wordpress
$src string or $src boll: Determinar de donde es la fuente de nuestro archivo. En source Podemos recibir bool porque podemos llamar todas las dependencias que nosotros necesitamos sin crear una nueva, es decir, si nosotros tenemos registrado Bootstrap, podemos llamar a boottrap, pasar bool en vez de string en el source y recibir solamente Bootstrap. Estos son como un alias para hacer un conjunto de librerías sin llamar una nueva
$deps=array()array: las dependencias van a ser un array de strings que vamos a poner los nombres o handeles que fuimos registrando previamente, si tenemos alguno o directamente a registrarlo si tenemos uno nuevo. (Las dependencias que necesita ejecutarse antes de ejecutar ese archivo JavaScrip)
$ver=string or $ver=bool or $ver=null: estos son importantes si tenemos una versión de cache para poder decirle a nuestro navegador que regenere el pedido en caso de querer hacer modificaciones
$in_footer=falsebool: Este es el único argumento diferente que podemos de cirle que se ejecute en el footer o que se ejecute en el head.

¿Por qué manejar las librerías de forma dinámica?
Nos van a permitir utilizar nuestros templates en diferentes sitios, diferentes urls, en las cuales nosotros tengamos nuestras propias librerías en ellas. En el momento en que nosotros cambiamos de sitio esas urls se van a generar automáticamente y van a llamar a ese archivo. Además el uso de registro de dependencias nos permite controlar con PHP el flujo en las cuales se cargan las diferentes librerías y evita problemas como generar librerías duplicadas



Librerías

wp_register_style() => registra el estilo
wp_enqueue_style() => ejecuta el estilo

wp_register_script() => registra el script
wp_enqueue_script() => ejecuta el script


otro RESUMEN 


Manejo de Librerías en WordPress
<h3>Archivos CSS</h3>
Vamos a usar dos funciones, estas están basadas en dos tipos de formas de manejar la información de wordPress, una es el registro y la otra es poner en cola.

wp_register_style() → Nos sirve para registrar la librería y que tengamos a disposición una dependencia, pero no la va a ejecutar en nuestro HTML.
Argumentos:
- $handle string → El nombre que va a tener nuestra librería para WP
- $src string|bool
- $deps = array() array → Aquí pondremos los nombre(handles) que fuimos registrando previamente o registrar uno nuevo.
- $ver = string|bool|null → Aquí pondremos nuestra versión de cache para decirle al navegador que nos regenere el pedido en el caso de hacer modificaciones
- $media = 'all’ string → Nos permitirá que nuestro CSS se pueda ejecutar en todas las pantallas o en una especifica.

wp_enqueue_style() → Nos va a ejecutar directamente la librería que nosotros le digamos, pero va a llamar las referencias que tenemos registradas.
Argumentos:
- $handle string → El nombre que va a tener nuestra librería para WP
- $src string|bool
- $deps = array() array → Aquí pondremos los nombre(handles) que fuimos registrando previamente o registrar uno nuevo.
- $ver = string|bool|null → Aquí pondremos nuestra versión de cache para decirle al navegador que nos regenere el pedido en el caso de hacer modificaciones
- $media = 'all’ string → Nos permitirá que nuestro CSS se pueda ejecutar en todas las pantallas o en una especifica.

<h3>JS</h3>
Aquí las funciones son muy similares a los CSS.

wp_register_style()
Argumentos:
- $handle string
- $src string|bool
- $deps = array() array
- $ver = string|bool|null
- $in_footer = false bool → Esto le indica que se ejecute en el footer o en head.

wp_enqueue_style()
Argumentos:
- $handle string
- $src string|bool
- $deps = array() array
- $ver = string|bool|null
- $in_footer = false bool


::::::::____________________________________________________________::::::::::::::::::::::::::_______________________________________


Administrador: Es la parte más fuerte de Wordpress. Es una interfaz gráfica desde la cual se pueden administrar todos los contenidos del sitio, esto incluye: entradas de blog, comentarios, imágenes, videos, plugins, etc.

Las principales secciones del administrador son las siguientes:

Escritorio: Sugerencia de flujo de trabajo, muestra de la actividad en entradas (textos de blog) y sus comentarios y un borrador rápido donde es posible dejarnos notas para leer en el futuro.

Entradas: Notas de blog, en caso de que tengamos una página de novedades, se pueden añadir nuevas, eliminar entradas, gestionar categorías y etiquetas.

Medios: Aquí se van a encontrar todas las imágenes, videos y auidios que subamos.

Páginas: Secciones de nuestro sitio por las cuales vamos a navegar

Comentarios: Se pueden administrar los comentarios en caso de que tengamos entradas de blogs: bloquear usuarios que hagan ciertos comentarios, aprobarlos, o mandar los comentarios a spam

Apariencia: Aquí se puede gestionar todo lo referente a nuestros temas. Seleccionar el que deseemos, realizar modificaciones de las secciones que componen los temas (colores y otras opciones), crear los menús de navegación, y editar el código del tema sin tener que entrar directamente al archivo.

Plugins: Se administran los plugins que tendrá nuestro sitio. Uno instalado por defecto es el de control de spam en los comentarios. El editor de plugins nos permite editar el código de estos sin necesidad de salir del administrador.



Los roles de usuario te permitirán gestionar los permisos de los usuarios dentro de tu sitio, es decir, qué puede y qué no puede hacer dentro del administrador. Estas acciones se denominan capabilities.

Esto es muy útil ya te permite segmentar las tareas de tus usuarios. Por ejemplo, si dentro de la web tienes a alguien cuya tarea es la de crear y corregir notas de blog, si le asignas el rol Editor a su usuario, este no va a poder agregar plugins ni modificar el contenido de las páginas, solo podrá crear y editar notas. Esta práctica es muy importante para garantizar la seguridad y la estructura de nuestro sitio.

Se pueden presentar casos en los que los roles por defecto no alcancen o sean demasiado restrictivos, para eso WordPress brinda la posibilidad de crear, eliminar y modificar roles.

Crear un rol de usuario
Para crear un rol de usuario podés utilizar la función add_role() que nos provee WordPress, la tenés que utilizar dentro de una función y asignarla al hook init. Esto tiene que hacerse desde el archivo functions.php.

function add_administrador_tema_role() { //nombre de nuestra función, puede ser el nombre que quieras
    add_role(
        'administrador_tema', //Nombre de role.
        'Administrador Tema', //Nombre que se visualará en la creación o página de opciones de usuarios.
       array(    
            'read' => true, //Permite el acceso al dashboard del adminitrador.
            'switch_themes' => true, //Permite el cambio de temas.
            'edit_themes'   => true, //Permite editar archivos desde el administrado de archivos del tema.
            'edit_theme_options' => true, //Permite modificar Widgets,Menús, Personalizar.
            'install_themes'    => true,  //Permite instalar temas nuevos.
            'update_themes' => true, //Permite actualizar temas instalados.
            'delete_themes' => true, //Permite eliminar temas.

            )   //Array con las capabilities
    );
}

//add_action(Hook, Nombre de la función)
add_action('init', 'add_administrador_tema_role'); 

Una vez que este código esté inicializado, el usuario ya quedará creado con esa configuración. Si necesitás eliminarlo, no bastará con eliminar la función, tendrás que usar el método que veremos a continuación.

Eliminar un rol de usuario
Para eliminar un rol de usuario podés a utilizar la función remove_role() y, de la misma forma que para crearlo, tenés que utilizarla dentro de una función asignada al hook init, en el archivo function.php.

function remove_role_administrado_temas() { //Nombre de la función
    remove_role( 'administrador_tema' ); 
}
 
//add_action(Hook, Nombre de la función)
add_action( 'init', 'remove_role_administrado_temas' );
Modificando capabilities en roles
Para agregar capabilities en un role, lo primero que tenés que hacer es instanciar el role dentro de una variable conla función get_role(). Una vez hecho eso puedes utilizar los métodos add_cap() y remove_cap().

En el siguiente ejemplo se le dará al role de usuario subscriptor el permiso para editar posts (entradas de blog, custom post type).


function add_cap_subscriber(){ //Nombre de la función
    $role = get_role( 'subscriber' ); //Instaciamos el role en la variable $role
    $role->add_cap( 'edit_posts'); //Agregamos la cabability usando el método add_cap().
}

//add_action(Hook, Nombre de la función)
add_action( 'init', 'add_cap_subscriber');

En el siguiente ejemplo se removerá al role de usuario editor, el permiso para modificar contenidos (entradas de blog, custom post type, etc).


function remove_cap_editor(){ //Nombre de la función
    $role = get_role( 'editor' ); //Instaciamos el role en la variable $role
    $role->remove_cap('edit_pages'); //Removemos la cabability usando el método remove_cap().
}

//add_action(Hook, Nombre de la función)
add_action( 'init', 'remove_cap_editor');


_____________________________________________________________________________________

/*
Theme name: Plugin
Version: 1.0
Description: sitio para curso creacion plugin
Author: Alejandro Arango Arias
Authon URI: https://github.com/warango
License: GNU General Public Licence v2 or later
License: http://www.gnu.org/licenses/gpl-2.0.html




______________________________________________________________________________________








